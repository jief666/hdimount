#include <stddef.h>
#include <string.h> // for memcmp
#include <assert.h>
#include <stdint.h>
#include <inttypes.h>

#include <openssl/sha.h>
#include <openssl/aes.h>
#include <openssl/hmac.h>
#include <openssl/evp.h>
#include <openssl/modes.h>

static void printBuf(const uint8_t* buf, size_t count, const char* name, int line_length = 8)
{
	if ( name ) printf("static const uint8_t %s[] = {\n", name);
	for (size_t i = 0; i < count;) {
		printf("\t");
		for (int j = 0; j < line_length; j++) {
			if ( i + j < count-1 ) {
				if ( j < line_length-1 ) {
					printf("0x%02x, ", (uint8_t) (buf[i + j]));
				}else{
					printf("0x%02x,", (uint8_t) (buf[i + j]));
				}
			}
			else if ( i + j < count ) {
				printf("0x%02x", (uint8_t) (buf[i + j]));
			}
		}
		i += line_length;
		printf("\n");
	}
	if ( name ) printf("};\n");
}



static int test_AES_CBC(const unsigned char *userKey, const int bits,
                         const unsigned char *in, size_t length,
                         unsigned char *ivec,
                         const unsigned char *expected_result, int expected_result_len)
{
	int ret = 0;
	unsigned char out[expected_result_len];
//printBuf(userKey, bits/8, "userKey");

	AES_KEY aes_key;
	memset(&aes_key, 0, sizeof(AES_KEY)); // not needed
	int rv1 = AES_set_decrypt_key(userKey, bits, &aes_key); // 0 on success
//printBuf((uint8_t*)&aes_key, sizeof(AES_KEY), "aes_key");
//printBuf(in, length, "in");
//printBuf(ivec, 16, "iv");
	AES_cbc_encrypt((uint8_t*)in, (uint8_t*)out, length, &aes_key, ivec, AES_DECRYPT);
//printBuf(out, length, "expected_result");

	if (memcmp(expected_result, out, expected_result_len))
		goto err;
	ret = 1;
  err:
	return ret;
}




static const uint8_t userKey[] = {
	0x98, 0x35, 0x11, 0x34, 0xd5, 0x78, 0x26, 0xb0,
	0x87, 0x82, 0x97, 0x4d, 0x9c, 0x9b, 0x32, 0x9a
};
static const uint8_t in[] = {
	0x3c, 0xfe, 0x13, 0x0b, 0xbf, 0x53, 0xf2, 0x59,
	0xb8, 0x4d, 0x69, 0x2c, 0x02, 0x04, 0xfb, 0x14,
	0x5b, 0x5e, 0x3d, 0x11, 0xde, 0x95, 0x1a, 0x18,
	0x1d, 0x4d, 0x6b, 0xf0, 0xad, 0x0b, 0xd2, 0x3e,
	0x09, 0x11, 0x62, 0x8e, 0x2b, 0xab, 0xf2, 0xda,
	0x68, 0x28, 0xf4, 0x1d, 0x85, 0x27, 0x1d, 0x04,
	0xa0, 0xa9, 0x51, 0x3e, 0xb5, 0xf3, 0x54, 0xcb,
	0x3f, 0xa6, 0xf8, 0x8c, 0xd2, 0xbe, 0x85, 0xcc,
	0xd8, 0x48, 0xe7, 0x20, 0xd9, 0xc6, 0x81, 0xb4,
	0x7f, 0xc1, 0x58, 0x52, 0xaa, 0x8b, 0x5b, 0xf3,
	0xdf, 0xbb, 0xf6, 0xb7, 0xb3, 0x0a, 0xca, 0x43,
	0x2b, 0x22, 0x10, 0xf8, 0xe8, 0x10, 0x65, 0x40,
	0x31, 0x85, 0xb1, 0x6a, 0xa3, 0x2b, 0xc8, 0x82,
	0x07, 0xf8, 0x5a, 0x7e, 0xb4, 0xd7, 0x51, 0x2b,
	0xef, 0xfc, 0x2e, 0x31, 0x72, 0x4e, 0xef, 0x5a,
	0x02, 0x74, 0x37, 0x1c, 0xad, 0x6a, 0x7d, 0x6f,
	0x9e, 0x04, 0xa7, 0x59, 0xad, 0xe1, 0xd5, 0x3d,
	0x8b, 0xdc, 0xfe, 0x16, 0xe8, 0x32, 0x34, 0x91,
	0x21, 0xb2, 0x8b, 0xdb, 0x51, 0x6a, 0xc4, 0x7d,
	0xcc, 0x1f, 0xc6, 0x27, 0xd9, 0xfd, 0x56, 0xad,
	0x22, 0xb4, 0x8e, 0x9e, 0x5a, 0x4f, 0xb5, 0xfe,
	0x85, 0x82, 0x01, 0x7b, 0x68, 0x3a, 0xb7, 0xd8,
	0x6f, 0x43, 0xb6, 0x60, 0xde, 0x3d, 0xe5, 0x90,
	0x06, 0x2e, 0x4c, 0x33, 0x56, 0xa2, 0x7b, 0xbf,
	0xd8, 0x2b, 0x90, 0x0b, 0xc4, 0x0e, 0xa3, 0xb5,
	0x80, 0xa6, 0xcd, 0xac, 0x2e, 0x01, 0x91, 0xc1,
	0xbc, 0x70, 0x85, 0x06, 0x7a, 0x0f, 0x4b, 0xac,
	0x5f, 0x57, 0xe9, 0x0b, 0x34, 0x70, 0x8f, 0xf6,
	0x55, 0xac, 0x34, 0xe7, 0x00, 0x64, 0xb6, 0x2b,
	0x54, 0x32, 0xbb, 0x79, 0x64, 0x99, 0x38, 0x87,
	0x11, 0x0f, 0x52, 0xc4, 0xe1, 0xbd, 0xcf, 0x9c,
	0x8f, 0x9a, 0x55, 0x64, 0x2f, 0x32, 0x88, 0xc4,
	0x94, 0xfd, 0x78, 0x71, 0x2c, 0x2e, 0xa4, 0x66,
	0x18, 0x39, 0xcf, 0x83, 0xe4, 0x3b, 0xe9, 0xe4,
	0x9d, 0x2b, 0x0c, 0x8b, 0x93, 0xcf, 0x7b, 0xf2,
	0x3c, 0x83, 0xda, 0xce, 0xeb, 0x6c, 0x66, 0xaa,
	0x2f, 0x9d, 0xc5, 0xf1, 0x1b, 0x10, 0xe9, 0xfa,
	0x4b, 0x2f, 0x47, 0x09, 0x7b, 0x92, 0x9d, 0xf4,
	0x95, 0x29, 0x92, 0x98, 0x77, 0x8f, 0x0c, 0x60,
	0x88, 0xc4, 0x49, 0x22, 0xb3, 0x0d, 0xe1, 0x2b,
	0x7c, 0x24, 0xaf, 0xcc, 0x4c, 0x24, 0x6a, 0xa8,
	0x7a, 0xcf, 0x04, 0xa6, 0x9e, 0x05, 0x88, 0xbc,
	0x1d, 0xce, 0xa5, 0x5f, 0xa8, 0xd5, 0x41, 0x25,
	0x94, 0x67, 0x7e, 0x30, 0x95, 0xeb, 0xa3, 0x1e,
	0x44, 0x88, 0x18, 0x5b, 0xa7, 0x09, 0x6c, 0x2d,
	0x1a, 0xa9, 0x0c, 0xbc, 0x7a, 0x2f, 0x4e, 0xf0,
	0xba, 0x45, 0x85, 0x35, 0xf8, 0x57, 0x72, 0xab,
	0xa6, 0x83, 0x9b, 0xaa, 0xe2, 0xb0, 0x62, 0xfe,
	0x5e, 0x99, 0xb7, 0x8f, 0x2e, 0x35, 0x27, 0xf9,
	0x1d, 0xad, 0xf7, 0x3d, 0x2b, 0x91, 0xa7, 0x90,
	0x31, 0xb1, 0xf0, 0x02, 0xa4, 0xeb, 0x02, 0x4a,
	0x3e, 0x14, 0xc9, 0x8d, 0xe5, 0x94, 0xbe, 0x4b,
	0xb9, 0x1d, 0x7f, 0xc3, 0x39, 0x60, 0x54, 0xca,
	0x94, 0x7b, 0x6d, 0x31, 0x10, 0x2b, 0x36, 0xbd,
	0xb2, 0xd0, 0xf8, 0x23, 0x4f, 0x9e, 0xf4, 0xfc,
	0x07, 0x64, 0x59, 0x96, 0x9c, 0x5a, 0x61, 0xbc,
	0xea, 0x13, 0x5d, 0xd5, 0x68, 0x2a, 0x69, 0x23,
	0xf6, 0xec, 0xb6, 0x33, 0xab, 0x39, 0x89, 0xbe,
	0x9d, 0xe3, 0x82, 0x14, 0xb1, 0xef, 0x98, 0x68,
	0x5f, 0xd4, 0xf4, 0x68, 0x2a, 0xf7, 0x42, 0x7d,
	0x89, 0x8e, 0x15, 0xf6, 0x99, 0xf5, 0xa1, 0x7f,
	0xd7, 0xdd, 0xd5, 0x2d, 0x22, 0xf8, 0xa9, 0x8e,
	0x1d, 0xb6, 0xd3, 0x9c, 0x17, 0x85, 0x4f, 0x55,
	0x27, 0xad, 0x97, 0xb7, 0x5f, 0x44, 0x62, 0x12
};
static uint8_t iv[] = { // DO NOT put const : iv is modified
	0x61, 0x36, 0x05, 0x30, 0x44, 0xfa, 0x9b, 0x8f,
	0xe4, 0xfc, 0xf7, 0x16, 0x50, 0x88, 0xa9, 0x5a
};
static const uint8_t expected_result[] = {
	0x00, 0x08, 0x00, 0x78, 0x00, 0x61, 0x00, 0x74,
	0x00, 0x74, 0x00, 0x72, 0x00, 0x31, 0x00, 0x38,
	0x00, 0x35, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x03, 0x31, 0x38, 0x35, 0xde, 0x00, 0x1c,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x08, 0x00, 0x78, 0x00, 0x61,
	0x00, 0x74, 0x00, 0x74, 0x00, 0x72, 0x00, 0x31,
	0x00, 0x38, 0x00, 0x36, 0x00, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x03, 0x31, 0x38, 0x36, 0xde,
	0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x78,
	0x00, 0x61, 0x00, 0x74, 0x00, 0x74, 0x00, 0x72,
	0x00, 0x31, 0x00, 0x38, 0x00, 0x37, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x31, 0x38,
	0x37, 0xde, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
	0x00, 0x78, 0x00, 0x61, 0x00, 0x74, 0x00, 0x74,
	0x00, 0x72, 0x00, 0x31, 0x00, 0x38, 0x00, 0x38,
	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
	0x31, 0x38, 0x38, 0xde, 0x00, 0x1c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x08, 0x00, 0x78, 0x00, 0x61, 0x00, 0x74,
	0x00, 0x74, 0x00, 0x72, 0x00, 0x31, 0x00, 0x38,
	0x00, 0x39, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x03, 0x31, 0x38, 0x39, 0xde, 0x00, 0x1a,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x07, 0x00, 0x78, 0x00, 0x61,
	0x00, 0x74, 0x00, 0x74, 0x00, 0x72, 0x00, 0x31,
	0x00, 0x39, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x02, 0x31, 0x39, 0x00, 0x1c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x08, 0x00, 0x78, 0x00, 0x61, 0x00, 0x74,
	0x00, 0x74, 0x00, 0x72, 0x00, 0x31, 0x00, 0x39,
	0x00, 0x30, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x03, 0x31, 0x39, 0x30, 0xde, 0x00, 0x1c,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x08, 0x00, 0x78, 0x00, 0x61,
	0x00, 0x74, 0x00, 0x74, 0x00, 0x72, 0x00, 0x31,
	0x00, 0x39, 0x00, 0x31, 0x00, 0x00, 0x00, 0x10,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x03, 0x31, 0x39, 0x31, 0xde,
	0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x78,
	0x00, 0x61, 0x00, 0x74, 0x00, 0x74, 0x00, 0x72,
	0x00, 0x31, 0x00, 0x39, 0x00, 0x32, 0x00, 0x00,
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x31, 0x39,
	0x32, 0xde, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
	0x00, 0x78, 0x00, 0x61, 0x00, 0x74, 0x00, 0x74,
	0x00, 0x72, 0x00, 0x31, 0x00, 0x39, 0x00, 0x33,
	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
	0x31, 0x39, 0x33, 0xde, 0x00, 0x1c, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x08, 0x00, 0x78, 0x00, 0x61, 0x00, 0x74,
	0x00, 0x74, 0x00, 0x72, 0x00, 0x31, 0x00, 0x39
};

int test_AES_CBC_openssl()
{


	bool all_tests_ok = true;
	int ret;
	ret = test_AES_CBC(userKey, sizeof(userKey)*8, in, sizeof(in), (unsigned char*)iv, expected_result, sizeof(expected_result));
	fprintf(stderr, "test_AES_CBC_openssl %d\n", ret);
	if ( ret == 0 ) all_tests_ok = false;

	return 1;
}

